import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from transformers import pipeline, AutoTokenizer, T5ForConditionalGeneration
import logging
from openai import OpenAI

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=os.getenv("TELEGRAM_TOKEN", "8114468392:AAF9d5Bq7coCZAhMYn9ZZwXzTm3vWz5Euxk"))
dp = Dispatcher()

client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("OPENROUTER_API_KEY", "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"),
)

logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
sentiment_analyzer = pipeline(
    "sentiment-analysis",
    model="blanchefort/rubert-base-cased-sentiment"
)
logger.info("–ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n"
        "–ú–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤."
    )

async def generate_recommendations_with_deepseek(text: str, sentiment: str, score: float) -> str:
    if sentiment == "NEGATIVE":
        system_prompt = (
            "–í—ã - –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. "
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –¥–∞–π—Ç–µ 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä—É "
            "–ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–∏—Ç—É–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏."
        )
        user_prompt = (
            f"–¢–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º (—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.2f}):\n\n"
            f"{text}\n\n"
            "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "1) [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ] - [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]\n"
            "2) [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ] - [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]\n"
            "..."
        )
    elif sentiment == "POSITIVE":
        system_prompt = (
            "–í—ã - –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. "
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –¥–∞–π—Ç–µ 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä—É "
            "–∫–∞–∫ —É—Å–∏–ª–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞."
        )
        user_prompt = (
            f"–¢–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º (—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.2f}):\n\n"
            f"{text}\n\n"
            "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "1) [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ] - [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]\n"
            "2) [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ] - [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]\n"
            "..."
        )
    else:
        system_prompt = (
            "–í—ã - –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. "
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –¥–∞–π—Ç–µ 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä—É "
            "–∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–ª–µ–µ —Ç–µ–ø–ª—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Ä—É—Å–ª–æ."
        )
        user_prompt = (
            f"–¢–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º (—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.2f}):\n\n"
            f"{text}\n\n"
            "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "1) [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ] - [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]\n"
            "2) [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ] - [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]\n"
            "..."
        )
    
    try:
        completion = client.chat.completions.create(
            model="deepseek/deepseek-r1",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=500,
            )
        
        return completion.choices[0].message.content.strip()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek: {e}", exc_info=True)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@dp.message()
async def analyze_conversation(message: types.Message):
    text = message.text
    
    if len(text) < 20:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    try:
        # –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        sentiment_result = sentiment_analyzer(text)[0]
        sentiment_label = sentiment_result["label"]
        score = sentiment_result["score"]
        
        tone = {
            "POSITIVE": "‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π",
            "NEUTRAL": "üî∏ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
            "NEGATIVE": "üîª –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π"
        }.get(sentiment_label, "üî∏ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ DeepSeek
        recommendations = await generate_recommendations_with_deepseek(text, sentiment_label, score)
        
        response = (
            f"üìä –¢–æ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {tone} (—Ç–æ—á–Ω–æ—Å—Ç—å: {score:.2f})\n\n"
            f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{recommendations}"
        )
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())